stages:
  - check
  - document
  - deply_demo
  - deploy_prod

variables:
  LIBS_USER: "$CI_PROJECT_DIR/ci/lib"


cache:
    paths:
      - $LIBS_USER


check-prod:
  image: rocker/r-ver:4.2.0
  stage: check
  script:
    - mkdir -p $LIBS_USER
    - echo 'R_LIBS_USER="${LIBS_USER}"' > .Renviron
    - echo 'INSTALL SYSTEM DEPENDENCIES'
    - apt-get update
    - R -e 'install.packages("pak", lib = Sys.getenv("R_LIBS_USER"), repos = sprintf("https://r-lib.github.io/p/pak/stable/%s/%s/%s", .Platform$pkgType, R.Version()$os, R.Version()$arch))'
    - R -e 'pak::pkg_install("distro", lib = Sys.getenv("R_LIBS_USER"))'
    - R -e 'pak::local_system_requirements(execute = TRUE, sudo = FALSE)'
    - echo 'INSTALL R PACKAGE DEPENDENCIES'
    - R -e 'pak::pkg_install(c("Rcpp", "rcmdcheck"), lib = Sys.getenv("R_LIBS_USER"))'
    - R -e 'pak::local_install_dev_deps(lib = Sys.getenv("R_LIBS_USER"))'
    - echo "CHECK PACKAGE"
    - R -e 'rcmdcheck::rcmdcheck(args = c("--no-manual", "--no-build-vignettes"), error_on = "error")'
    - echo "Build package"
    - R CMD build . --no-build-vignettes --no-manual
  artifacts:
      paths:
        - "*.tar.gz"

pages:
  image: rocker/r-ver:4.2.0
  stage: document
  only:
    refs:
    - master
  script:
    - echo "Build pages"
    - mkdir -p $LIBS_USER
    - echo 'R_LIBS_USER="${LIBS_USER}"' > .Renviron
    - echo 'INSTALL SYSTEM DEPENDENCIES'
    - apt-get update
    - R -e 'install.packages("pak", lib = Sys.getenv("R_LIBS_USER"), repos = sprintf("https://r-lib.github.io/p/pak/stable/%s/%s/%s", .Platform$pkgType, R.Version()$os, R.Version()$arch))'
    - R -e 'pak::pkg_install("distro", lib = Sys.getenv("R_LIBS_USER"))'
    - R -e 'pak::local_system_requirements(execute = TRUE, sudo = FALSE)'
    - echo 'INSTALL R PACKAGE DEPENDENCIES'
    - R -e 'pak::pkg_install("pkgdown", lib = Sys.getenv("R_LIBS_USER"))'
    - R -e 'pak::local_install_dev_deps(lib = Sys.getenv("R_LIBS_USER"))'
    - echo 'BUILD DOCUMENTATION'
    - R -e 'pkgdown::build_site(lazy = TRUE, preview = FALSE)'
    # Fuling
    - mv docs public
  artifacts:
    paths:
      - public

deploy to prod:
   stage: deploy_demo
   tags:
     - rc-rdemo
   before_script: []
   script: .\PsScripts\deploy.ps1
   environment:
     name: demo
   only:
    refs:
      - master
   when: manual

deploy to prod:
   stage: deploy_prod
   tags:
     - rc-r
   before_script: []
   script: .\PsScripts\deploy.ps1
   environment:
     name: prod
   only:
    refs:
      - master
   when: manual
