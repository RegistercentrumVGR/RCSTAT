stages:
  - check
  - document
  - deploy_dev

variables:
  LIBS_USER: "$CI_PROJECT_DIR/ci/lib"
  RENV_PATHS_LIBRARY: "$CI_PROJECT_DIR/ci/renv/lib"
  RENV_PATHS_LIBRARY_ROOT: "$CI_PROJECT_DIR/ci/renv"
  RENV_PATHS_CACHE: "$CI_PROJECT_DIR/ci/cache"

cache:
    paths:
      - $LIBS_USER
      - $RENV_PATHS_CACHE
      - $RENV_PATHS_LIBRARY_ROOT
    

check-prod:
  image: rocker/r-ver:4.0.2
  stage: check
  script:
    - mkdir -p $RENV_PATHS_LIBRARY
    - echo 'RENV_PATHS_LIBRARY="${RENV_PATHS_LIBRARY}"' > .Renviron
    - echo 'RENV_PATHS_CACHE = "${RENV_PATHS_CACHE}"' >> .Renviron
    - echo 'RENV_PATHS_LIBRARY_ROOT = "${RENV_PATHS_LIBRARY_ROOT}"' >> .Renviron
    - apt-get update
    - R -e 'install.packages("pak", repos = sprintf("https://r-lib.github.io/p/pak/stable/%s/%s/%s", .Platform$pkgType, R.Version()$os, R.Version()$arch))'
    - R -e 'pak::pkg_install("distro")'
    - R -e 'pak::local_system_requirements(execute = TRUE, sudo = FALSE)'
    - R -e 'pak::pkg_install(c("renv", "rcmdcheck", "pkgdown"))'
    - R -e 'renv::restore()'
    - echo "Check package"
    - R -e 'rcmdcheck::rcmdcheck(args = c("--no-manual", "--no-build-vignettes"), error_on = "error")'
    # build the package
    - echo "Build package"
    - R CMD build . --no-build-vignettes --no-manual
    - pwd
    - ls -la
  artifacts:
    paths:
      - "*.tar.gz"


check-latest:
  image: rocker/r-ver:4.2.1
  stage: check
  script:
    - mkdir -p $LIBS_USER
    - echo 'R_LIBS_USER="${LIBS_USER}"' > .Renviron
    # Do not use renv in this stage
    - rm .Rprofile
    - echo 'INSTALL SYSTEM DEPENDENCIES'
    - apt-get update
    - R -e 'install.packages("pak", lib = Sys.getenv("R_LIBS_USER"), repos = sprintf("https://r-lib.github.io/p/pak/stable/%s/%s/%s", .Platform$pkgType, R.Version()$os, R.Version()$arch))'
    - R -e 'pak::pkg_install("distro", lib = Sys.getenv("R_LIBS_USER"))'
    - R -e 'pak::local_system_requirements(execute = TRUE, sudo = FALSE)'
    - echo 'INSTALL R PACKAGE DEPENDENCIES'
    - R -e 'pak::pkg_install("rcmdcheck", lib = Sys.getenv("R_LIBS_USER"))'
    - R -e 'pak::local_install_dev_deps(lib = Sys.getenv("R_LIBS_USER"))'
    - echo "CHECK PACKAGE"
    - R -e 'rcmdcheck::rcmdcheck(args = c("--no-manual", "--no-build-vignettes"), error_on = "error")'

pages:
  image: rocker/r-ver:4.2.1
  stage: document
  only:
    refs:
    - master
  script:
    - echo "Build pages"
    - mkdir -p $LIBS_USER
    - echo 'R_LIBS_USER="${LIBS_USER}"' > .Renviron
    # Do not use renv in this stage
    - rm .Rprofile
    - echo 'INSTALL SYSTEM DEPENDENCIES'
    - apt-get update
    - R -e 'install.packages("pak", lib = Sys.getenv("R_LIBS_USER"), repos = sprintf("https://r-lib.github.io/p/pak/stable/%s/%s/%s", .Platform$pkgType, R.Version()$os, R.Version()$arch))'
    - R -e 'pak::pkg_install("distro", lib = Sys.getenv("R_LIBS_USER"))'
    - R -e 'pak::local_system_requirements(execute = TRUE, sudo = FALSE)'
    - echo 'INSTALL R PACKAGE DEPENDENCIES'
    - R -e 'pak::pkg_install("pkgdown", lib = Sys.getenv("R_LIBS_USER"))'
    - R -e 'pak::local_install_dev_deps(lib = Sys.getenv("R_LIBS_USER"))'
    - echo 'BUILD DOCUMENTATION'
    - R -e 'pkgdown::build_site(lazy = TRUE, preview = FALSE)'
    # Fuling
    - mv docs public
  artifacts:
    paths:
      - public

deploy to dev:
   stage: deploy_dev
   tags:
     - rc-r
   before_script: []
   script: .\PsScripts\deploy.ps1
   environment:
     name: dev
   only:
    refs:
      - master
   when: manual    